import os
from google.oauth2 import service_account
from googleapiclient import discovery
from googleapiclient.http import MediaFileUpload
from selenium import webdriver
from datetime import datetime
import pandas as pd
import numpy as np
import xlwings as xw
import unidecode
import warnings
import time

# DMS download
now = datetime.now()
print('start program %s' % now)
try:
    os.remove("C:/Users/Administrator/Downloads/Rawdata Doanh Số Chi Tiết (Tính Lương).Xlsb")
except Exception as e:
    pass
options = webdriver.ChromeOptions()
options.add_experimental_option('excludeSwitches', ['enable-logging'])
warnings.filterwarnings("ignore", category=DeprecationWarning)

PATH = "C:/Users/Administrator/Downloads/mr_sale_data-main/chromedriver.exe"
driver = webdriver.Chrome(PATH, chrome_options=options)
driver.get('http://dms.phanam.com.vn/')
driver.maximize_window()
user_id = "txtUserName-inputEl"
password_id = "txtPassword-inputEl"
dangnhap_id = "btnLogin-btnIconEl"
driver.find_element_by_id(user_id).send_keys("MR2523")
driver.find_element_by_id(password_id).send_keys("duyvq@123")
driver.find_element_by_id(dangnhap_id).click()
time.sleep(5)
classname = 'x-tree-node-text '
driver.find_elements_by_class_name(classname)[0].click()
time.sleep(2)
driver.find_elements_by_class_name(classname)[1].click()
time.sleep(2)
driver.find_elements_by_class_name(classname)[4].click()
time.sleep(5)
seq = driver.find_elements_by_tag_name('iframe')
# print("No of frames present in the web page are: ", len(seq))
iframe = driver.find_elements_by_tag_name('iframe')[0]
driver.switch_to.frame(iframe)
tungayid = 'cboDate00-inputEl'
driver.find_element_by_id(tungayid).clear()
driver.find_element_by_id(tungayid).send_keys("01-05-2021")
# denngayid = 'cboDate01-inputEl'
# driver.find_element_by_id(denngayid).clear()
# driver.find_element_by_id(denngayid).send_keys("31-05-2021")
time.sleep(1)
macongtyid = 'chkList0-inputEl'
driver.find_element_by_id(macongtyid).click()
time.sleep(1)
tabkieudonhangid = 'tab-1131-btnEl'
driver.find_element_by_id(tabkieudonhangid).click()
time.sleep(1)
checkkieudonhangid = 'chkList1-inputEl'
driver.find_element_by_id(checkkieudonhangid).click()
time.sleep(1)
exportid = 'btnExport-btnInnerEl'
driver.find_element_by_id(exportid).click()
driver.switch_to.default_content()

count = 0
count_limit = 300
while count < count_limit:
    time.sleep(1)
    count += 1
    if os.path.isfile('C:/Users/Administrator/Downloads/Rawdata Doanh Số Chi Tiết (Tính Lương).Xlsb'):
        driver.close()
        count = count_limit

# Excel Handling
app = xw.App(visible=True)
wb = app.books.open('C:/Users/Administrator/Downloads/Rawdata Doanh Số Chi Tiết (Tính Lương).Xlsb')
wb.sheets['Data'].range('1:4').delete()
wb.save()
wb.close()
app.quit()

# Google Sheet connection
scopes = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive',
          'https://www.googleapis.com/auth/drive.file']
jsonfile = 'C:/Users/Administrator/Downloads/mr_sale_data-main/datateam1599968716114-6f9f144b4262.json'
credentials = service_account.Credentials.from_service_account_file(jsonfile, scopes=scopes)
service = discovery.build('drive', 'v3', credentials=credentials)


def datetime_to_int(dt):
    return int(dt.strftime("%Y%m%d%H%M%S"))

df = pd.read_excel("C:/Users/Administrator/Downloads/Rawdata Doanh Số Chi Tiết (Tính Lương).Xlsb",
                   engine='pyxlsb')  # , engine='pyxlsb'
df.replace(np.nan, '', inplace=True)
# df = df.head()
columns = df.columns
columns_list = []
for c in columns:
    c = unidecode.unidecode(c)
    columns_list.append(c)

df.columns = columns_list
df.columns = df.columns.str.replace(' ', '')
print(df.shape[0])
#df_product
url_product='https://drive.google.com/file/d/15ClbdtRJhqF6bIDNgRLqI1wAytIoPWWR/view?usp=sharing'
file_id_product=url_product.split('/')[-2]
dwn_url_product='https://drive.google.com/uc?id=' + file_id_product
df_product = pd.read_csv(dwn_url_product)
df = df.merge(df_product[[' Mã Sản Phẩm',' Ngành Hàng']], how = 'left',left_on='MaSanPham', right_on=' Mã Sản Phẩm',suffixes=('_left', '_right'), validate="m:1")
#df_dan_so
url_dan_so= 'https://drive.google.com/file/d/1bhb_Rh3Kpm8W0le7VY1TFB2soZvfryPS/view?usp=sharing'
file_id_dan_so=url_dan_so.split('/')[-2]
dwn_url_dan_so='https://drive.google.com/uc?id=' + file_id_dan_so
df_dan_so = pd.read_csv(dwn_url_dan_so)
df = df.merge(df_dan_so, how = 'left', left_on='TenTinhKH', right_on='TenTinhKH',suffixes=('_left', '_right'), validate="m:1")
#df_clean_data
df = df[df['MaSanPham'].str[:1] != 'V']
df = df[df['MaKenhKH'] != 'NB']
df['SDDH-CN'] =  df['SoDonDatHang']+'.'+df['MaCongTy/CN']
print(df.shape[0])
#Merap/Phanam
inlist = ['EH072', 'OH057', 'OH032', 'OH047','OH016','OH058','OH060','OH061',
          'OH062','OH063','OH064','OH065','OH070','OH069','OH066','OH068','OH067','EH105','OH071','OH079','OH081']
x = np.array(df['MaSanPham'])
condlist = [np.isin(x, inlist)]
choicelist = ['Pha Nam']
default = 'Merap'
df['Merap/PhaNam'] = np.select(condlist,choicelist, default=default)

#MaKenhKH2
x = np.array(df['Merap/PhaNam'])
condlist = [np.isin(x, ['Pha Nam'])]
choicelist = ['Pha Nam']
default = df['MaKenhKH']
df['MaKenhKH2'] = np.select(condlist,choicelist, default=default)

#MaMien(B/N)
x = np.array(df['MaVungBH'])
condlist = [np.isin(x, ['BB','HN'])]
choicelist = ['MB']
default = 'MN'
df['MaMien(B/N)'] = np.select(condlist,choicelist, default=default)

#VanPhong
df['VanPhong'] = df['CongTy/CN'].str.split(' ').apply(lambda x: x[-2:]).apply(lambda x: 'VP '+' '.join(x))

#df to csv
df.to_csv("raw_data.csv", index=False)

#spreadsheets_id = '1qEwviiJcAtvWCLvc-5AXOgidaeHMsi2RWWIKiUehabI'
folder_id = '1nTlohjovIm7e2pf2LSHf3wGnyuuStGbh'
file_name = 'raw_data.csv'
file_type = 'text/csv'
file_body={'name':file_name,'addParents':[folder_id]}
query = f"parents = '{folder_id}'"
files = service.files().list(q=query).execute()
fileid  = files['files'][0]['id']

media = MediaFileUpload('{0}'.format(file_name), mimetype=file_type)
updated_file = service.files().update(fileId=fileid, body=file_body, media_body=media)
updated_file.execute()

# try:
#     rangeAll = '{0}!A1:BI'.format('DF1')
#     body = {}
#     resultClear = service.spreadsheets().values().clear(spreadsheetId=spreadsheets_id, range=rangeAll,
#                                                         body=body).execute()
#     time.sleep(5)
# except Exception as e:
#     print(e)
# finally:
#     print("finally deleted")

# try:
#     response_date = service.spreadsheets().values().append(
#         spreadsheetId=spreadsheets_id,
#         valueInputOption='RAW',
#         range='DF1!A1',
#         body=dict(
#             majorDimension='ROWS',
#             values=df.T.reset_index().T.values.tolist())
#     ).execute()
# except Exception as e:
#     print(e)
# finally:
#     now_final = datetime.now()
#     print("finally imported %s" % now_final)

try:
    os.remove("C:/Users/Administrator/Downloads/Rawdata Doanh Số Chi Tiết (Tính Lương).Xlsb")
except Exception as e:
    print(e)
finally:
    now_final = datetime.now()
    print("finally imported %s" % now_final)